Time Complexity For Backtracking:

The way I like to think about the runtime of backtracking algorithms is O(b^d), where b is the branching factor and d is the maximum depth of recursion.
Backtracking is characterized by a number of decisions b that can be made at each level of recursion. If you visualize the recursion tree, this is the number of children each internal node has. You can also think of b as standing for "base", which can help you remember that b is the base of the exponential.
If we can make b decisions at each level of recursion, and we expand the recursion tree to d levels (ie: each path has a length of d), then we get b^d nodes. Since backtracking is exhaustive and must visit each one of these nodes, the runtime is O(b^d).

Binary Search:

Tip1. left < right Vs left <= right

Check all my solution, I keep using left < right.
The easy but important approach:
follow and upvote my codes,
try to do the same.
you'll find all binary search is similar,
never bother thinking it anymore.

Tip2. mid = (left + right + 1) / 2 Vs mid = (left + right) / 2

mid = (left + right) / 2 to find first element valid
mid = (left + right + 1) / 2 to find last element valid

public int maximumCandies(int[] A, long k) {
    int left = 0, right = 10_000_000;
    while (left < right) {
        long sum = 0;
        int mid = (left + right + 1) / 2;
        for (int a : A) {
            sum += a / mid;
        }
        if (k > sum)
            right = mid - 1;
        else
            left = mid;
    }
    return left;
}

https://leetcode.com/problems/maximum-candies-allocated-to-k-children/discuss/1908888/JavaC%2B%2BPython-Binary-Search-with-Explanation
